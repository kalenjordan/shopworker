---
description:
globs:
alwaysApply: true
---
# Cloudflare Worker Environment Restrictions

The [worker.js](mdc:worker.js) file and any code initiated from it runs in a Cloudflare Workers environment, which has significant restrictions compared to Node.js.

## Prohibited Node.js Modules

The following Node.js modules are **not available** in the Cloudflare Workers environment:

- `fs` - No file system access
- `path` - No file path operations
- `http`/`https` - Use `fetch()` instead
- `stream` - No Node.js streams
- `buffer` - Use standard Web APIs instead
- `crypto` - Use Web Crypto API instead
- `process` - No Node.js process access
- `querystring` - Use `URLSearchParams` instead

## Guidelines for Worker Code

When editing code in [worker.js](mdc:worker.js) or any module it imports:

1. **Use Web APIs** - Stick to standard Web APIs available in the Workers runtime
2. **Avoid Node-specific code** - Don't use require() or Node.js built-in modules
3. **Use fetch()** - For HTTP requests, use the native fetch() API
4. **Environment variables** - Access via the `env` parameter passed to handlers
5. **Web Crypto** - Use the Web Crypto API for cryptographic operations

## Common Replacements

| Node.js API | Cloudflare Workers Alternative |
|-------------|--------------------------------|
| `fs.readFile()` | Use KV storage or fetch external resources |
| `path.join()` | String concatenation with '/' |
| `http.request()` | `fetch()` |
| `Buffer` | `ArrayBuffer`, `Uint8Array` |
| `crypto.createHmac()` | `crypto.subtle.importKey()` and `crypto.subtle.sign()` |
| `process.env` | Access `env` parameter passed to handlers |

Remember that any code that executes in the Cloudflare Workers environment must be compatible with these restrictions. Code in CLI tools like [cli.js](mdc:cli.js) that only runs locally can still use Node.js APIs.
