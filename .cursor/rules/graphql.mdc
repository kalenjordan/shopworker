---
description:
globs:
alwaysApply: true
---
# GraphQL Structure

The Shopworker CLI uses GraphQL to interact with the Shopify API. All GraphQL queries and mutations are stored in the `graphql/` directory.

## File Naming Convention

GraphQL queries and mutations are stored as JavaScript files that export the query string:
- [GetRecentOrders.js](mdc:graphql/GetRecentOrders.js) - Query to fetch recent orders
- [GetOrderById.js](mdc:graphql/GetOrderById.js) - Query to fetch a specific order by ID
- [OrderUpdate.js](mdc:graphql/OrderUpdate.js) - Mutation to update an order

Each file exports the GraphQL operation as a tagged template literal:

```javascript
export default `#graphql
query GetRecentOrders($first: Int!, $query: String) {
  // query fields...
}
`;
```

## Usage Pattern

GraphQL queries are imported directly where needed:

```javascript
import GetRecentOrders from '../../graphql/GetRecentOrders.js';

// Use the query directly with the GraphQL client
const response = await shopify.graphql(GetRecentOrders, variables);
```

## Anti-Patterns to Avoid

### ⚠️ Inline GraphQL in Job Files

**DO NOT define GraphQL operations directly in job files or other components.** This is an anti-pattern that makes queries harder to reuse and maintain.

Example of what **NOT** to do:
```javascript
// INCORRECT - Do not define GraphQL operations inline in job files
const GET_PRODUCT_BY_ID = `
  query getProductById($id: ID!) {
    product(id: $id) {
      id
      title
      tags
    }
  }
`;
```

### Correct Approach

1. Create a file in the `graphql/` directory, e.g., `GetProductById.js`:
```javascript
export default `
  query getProductById($id: ID!) {
    product(id: $id) {
      id
      title
      tags
    }
  }
`;
```

2. Import and use it in your job file:
```javascript
import GetProductById from '../../graphql/GetProductById.js';

// Later in your code:
const { product } = await shopify.graphql(GetProductById, { id: productId });
```

### Note on Return Value
The `shopify.graphql()` client function is designed to return the `data` portion of the GraphQL response directly. The variable assigned its result (e.g., `response` in the example above) will hold the queried data (like `{ orders: { ... } }`).

**Incorrect usage to avoid:**
```javascript
// DO NOT do this, as 'shopify.graphql()' already returns the data object:
// const { data: someVar } = await shopify.graphql(query, variables);
```

## Shopify ID Utility Methods

The Shopify client includes utility methods for working with GraphQL Global IDs (GIDs) as defined in [utils/shopify.js](mdc:utils/shopify.js):

### `shopify.fromGid(gid)`
Extracts the numeric ID from a Shopify GraphQL Global ID.

```javascript
// GraphQL returns: "gid://shopify/ProductVariant/12345678"
const numericId = shopify.fromGid(variant.id); // Returns "12345678"
const productId = parseInt(shopify.fromGid(variant.product.id)); // Returns 12345678 as number
```

### `shopify.toGid(id, type)`
Converts a numeric ID to a Shopify GraphQL Global ID format.

```javascript
const gid = shopify.toGid("12345678", "ProductVariant"); // Returns "gid://shopify/ProductVariant/12345678"
```

### `shopify.getTypeFromGid(gid)`
Gets the resource type from a Shopify GraphQL Global ID.

```javascript
const type = shopify.getTypeFromGid("gid://shopify/ProductVariant/12345678"); // Returns "ProductVariant"
```

**Always use these utility methods instead of manual string parsing** when working with Shopify GraphQL IDs to ensure consistent and reliable ID handling.
