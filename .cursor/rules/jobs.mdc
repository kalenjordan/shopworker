---
description:
globs:
alwaysApply: true
---
# Jobs Structure

Jobs are the core processing units of the Shopworker CLI. Each job is contained in its own directory under the `jobs/` folder.

## Job Directory Structure

A job directory contains:
- [config.json](mdc:jobs/order-created-tag-skus/config.json) - Configuration file specifying the trigger to use
- [job.js](mdc:jobs/order-created-tag-skus/job.js) - The implementation of the job's processing logic

## Example Job

The `order-created-tag-skus` job:
- Is triggered when a new order is created
- Extracts SKUs from line items in the order
- Adds these SKUs as tags to the order
- Uses [OrderUpdate.graphql](mdc:graphql/OrderUpdate.graphql) to update the order via Shopify's API

## Creating New Jobs

To create a new job:
1. Create a new directory under `jobs/`
2. Add a `config.json` file to specify the trigger
3. Implement the job's logic in `job.js` with an exported `process` function
4. The `process` function will receive the Shopify data object and the Shopify API client

## GraphQL Operations

When a job needs to perform GraphQL operations:
1. **ALWAYS** use dedicated GraphQL files from the `graphql/` directory
2. **NEVER** define GraphQL queries or mutations inline in job.js files
3. Import GraphQL operations like this:
```javascript
import GetProductById from '../../graphql/GetProductById.js';
import ProductUpdate from '../../graphql/ProductUpdate.js';
```
4. If a query or mutation doesn't exist, create a new file in the `graphql/` directory first

This pattern ensures that GraphQL operations can be reused across different jobs and improves maintainability.

## Error Handling

When implementing jobs, follow these guidelines:
- Do not use try/catch blocks in jobs - errors should bubble up to the main handler
- The CLI framework will handle logging and reporting of errors
- Only catch errors if you need to perform specific error handling or recovery

# Job Structure and Best Practices

This document outlines best practices for creating background jobs within this project.

## Method Length

When creating or refactoring jobs, aim to keep individual method lengths under approximately 30 lines. If a method grows significantly larger than this, it should be refactored into smaller, more focused helper functions.

This practice improves:
- **Readability:** Shorter methods are easier to understand at a glance.
- **Maintainability:** Smaller, well-defined functions are simpler to modify and debug.
- **Testability:** It is easier to write unit tests for smaller, more granular pieces of logic.
