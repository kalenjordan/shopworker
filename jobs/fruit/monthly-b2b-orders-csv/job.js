import GetRecentOrders from "../../../graphql/GetRecentOrders.js";
import { sendEmail, validateCredentials } from "../../../connectors/resend.js";
import { generateCSV, createAttachment, joinArray } from "../../../connectors/csv.js";
import { logToCli, logToWorker } from "../../../utils/env.js";
import { format, parseISO } from "date-fns";

/**
 * Process orders and send email with CSV attachment
 * @param {Object} params - Parameters for the job
 * @param {Object} params.record - The record object (empty for manual jobs)
 * @param {Object} params.shopify - Shopify API client
 * @param {Object} params.env - Environment variables
 * @param {Object} params.secrets - Secrets loaded from files or environment
 */
export async function process({ shopify, shopConfig, env }) {
  console.log("Starting fruit orders email report job", shopConfig);
  validateCredentials(shopConfig);

  // Fetch recent orders
  const orders = await fetchRecentOrders(shopify);

  if (!orders || orders.length === 0) {
    console.log("No orders found to process");
    return;
  }

  console.log(`Found ${orders.length} orders to include in report`);

  // Generate CSV content using the CSV connector
  const csvContent = generateCSV(orders, {
    headers: [
      'Order Number',
      'Created At',
      'Customer Email',
      'Total Price',
      'Tags',
      'Line Items'
    ],
    rowMapper: (order) => [
      order.name || '',
      order.createdAt ? format(parseISO(order.createdAt), 'yyyy-MM-dd HH:mm') : '',
      order.customer?.email || '',
      order.totalPrice || '',
      joinArray(order.tags),
      formatLineItems(order.lineItems)
    ]
  });

  logToCli(env, csvContent);

  // Create CSV attachment
  const attachment = createAttachment(csvContent, {
    filename: `orders-report-${new Date().toISOString().split('T')[0]}.csv`
  });

  // Prepare and send email
  const emailOptions = prepareEmailOptions(attachment, orders.length, shopConfig);
  await sendEmail(emailOptions, shopConfig.resend_api_key);

  console.log(`Email report sent successfully with subject line: ${emailOptions.subject}`);
}

/**
 * Fetch recent orders from Shopify
 * @param {Object} shopify - Shopify API client
 * @returns {Promise<Array>} Array of order objects
 */
async function fetchRecentOrders(shopify) {
  const variables = {
    first: 3, // Fetch last 50 orders
    query: null // No additional filtering
  };

  const { orders } = await shopify.graphql(GetRecentOrders, variables);

  return orders?.edges?.map(edge => edge.node) || [];
}

/**
 * Format line items for display
 * @param {Object} lineItems - Line items object from GraphQL
 * @returns {string} Formatted line items string
 */
function formatLineItems(lineItems) {
  if (!lineItems?.edges) return '';

  return lineItems.edges
    .map(edge => {
      const item = edge.node;
      const sku = item.variant?.sku || item.sku || '';
      const name = item.name || '';
      return `${name}${sku ? ` (${sku})` : ''}`;
    })
    .join('; ');
}

/**
 * Prepare email options
 * @param {Object} attachment - CSV attachment object
 * @param {number} orderCount - Number of orders in the report
 * @param {Object} shopConfig - Shop config object
 * @returns {Object} Email options object
 */
function prepareEmailOptions(attachment, orderCount, shopConfig) {
  const to = shopConfig.accounting_email || shopConfig.resend_to_email;
  const from = shopConfig.resend_from || shopConfig.resend_from_email;

  if (!to) {
    throw new Error('Missing accounting_email or resend_to_email in shop config');
  }

  if (!from) {
    throw new Error('Missing resend_from or resend_from_email in shop config');
  }

  const currentDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'America/Chicago'
  });

  return {
    to,
    from,
    subject: `Orders Report - ${currentDate}`,
    text: `Please find attached the orders report for ${currentDate}.\n\nThis report contains ${orderCount} orders.\n\nGenerated by Shopworker CLI.`,
    html: `
      <h2>Orders Report - ${currentDate}</h2>
      <p>Please find attached the orders report for <strong>${currentDate}</strong>.</p>
      <p>This report contains <strong>${orderCount}</strong> orders.</p>
      <p><em>Generated by Shopworker CLI</em></p>
    `,
    attachments: [attachment]
  };
}
